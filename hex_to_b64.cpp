#include <iostream>
#include <map>
#include <string>

std::map<char, int>  b64_bin = {
	{'A', 0},
	{'B', 1},
	{'C', 2},
	{'D', 3},
	{'E', 4},
	{'F', 5},
	{'G', 6},
	{'H', 7},
	{'I', 8},
	{'J', 9},
	{'K', 10},
	{'L', 11},
	{'M', 12},
	{'N', 13},
	{'O', 14},
	{'P', 15},
	{'Q', 16},
	{'R', 17},
	{'S', 18},
	{'T', 19},
	{'U', 20},
	{'V', 21},
	{'W', 22},
	{'X', 23},
	{'Y', 24},
	{'Z', 25},
	{'a', 26},
	{'b', 27},
	{'c', 28},
	{'d', 29},
	{'e', 30},
	{'f', 31},
	{'g', 32},
	{'h', 33},
	{'i', 34},
	{'j', 35},
	{'k', 36},
	{'l', 37},
	{'m', 38},
	{'n', 39},
	{'o', 40},
	{'p', 41},
	{'q', 42},
	{'r', 43},
	{'s', 44},
	{'t', 45},
	{'u', 46},
	{'v', 47},
	{'w', 48},
	{'x', 49},
	{'y', 50},
	{'z', 51},
	{'0', 52},
	{'1', 53},
	{'2', 54},
	{'3', 55},
	{'4', 56},
	{'5', 57},
	{'6', 58},
	{'7', 59},
	{'8', 60},
	{'9', 61},
	{'+', 62},
	{'/', 63},
	{'=', 64}
};
std::map<int, std::string> int_to_bstr = {
	{1, "000001"},
	{2, "000010"},
	{3, "000011"},
	{4, "000100"},
	{5, "000101"},
	{6, "000110"},
	{7, "000111"},
	{8, "001000"},
	{9, "001001"},
	{10, "001010"},
	{11, "001011"},
	{12, "001100"},
	{13, "001101"},
	{14, "001110"},
	{15, "001111"},
	{16, "010000"},
	{17, "010001"},
	{18, "010010"},
	{19, "010011"},
	{20, "010100"},
	{21, "010101"},
	{22, "010110"},
	{23, "010111"},
	{24, "011000"},
	{25, "011001"},
	{26, "011010"},
	{27, "011011"},
	{28, "011100"},
	{29, "011101"},
	{30, "011110"},
	{31, "011111"},
	{32, "100000"},
	{33, "100001"},
	{34, "100010"},
	{35, "100011"},
	{36, "100100"},
	{37, "100101"},
	{38, "100110"},
	{39, "100111"},
	{40, "101000"},
	{41, "101001"},
	{42, "101010"},
	{43, "101011"},
	{44, "101100"},
	{45, "101101"},
	{46, "101110"},
	{47, "101111"},
	{48, "110000"},
	{49, "110001"},
	{50, "110010"},
	{51, "110011"},
	{52, "110100"},
	{53, "110101"},
	{54, "110110"},
	{55, "110111"},
	{56, "111000"},
	{57, "111001"},
	{58, "111010"},
	{59, "111011"},
	{60, "111100"},
	{61, "111101"},
	{62, "111110"},
	{63, "111111"},
	{64, "000000"},
};

std::map<std::string, char> strbyte_to_ascii = {
	{"", 0},
	{"", 1},
	{"", 2},
	{"", 3},
	{"", 4},
	{"", 5},
	{"", 6},
	{"", 7},
	{"", 8},
	{"", 9},
	{"", 10},
	{"", 11},
	{"", 12},
	{"", 13},
	{"", 14},
	{"", 15},
	{"", 16},
	{"", 17},
	{"", 18},
	{"", 19},
	{"", 20},
	{"", 21},
	{"", 22},
	{"", 23},
	{"", 24},
	{"", 25},
	{"", 26},
	{"", 27},
	{"", 28},
	{"", 29},
	{"", 30},
	{"", 31},
	{"", 32},
	{"", 33},
	{"", 34},
	{"", 35},
	{"", 36},
	{"", 37},
	{"", 38},
	{"", 39},
	{"", 40},
	{"", 41},
	{"", 42},
	{"", 43},
	{"", 44},
	{"", 45},
	{"", 46},
	{"", 47},
	{"", 48},
	{"", 49},
	{"", 50},
	{"", 51},
	{"", 52},
	{"", 53},
	{"", 54},
	{"", 55},
	{"", 56},
	{"", 57},
	{"", 58},
	{"", 59},
	{"", 60},
	{"", 61},
	{"", 62},
	{"", 63},
	{"", 64},
	{"", 65},
	{"", 66},
	{"", 67},
	{"", 68},
	{"", 69},
	{"", 70},
	{"", 71},
	{"", 72},
	{"", 73},
	{"", 74},
	{"", 75},
	{"", 76},
	{"", 77},
	{"", 78},
	{"", 79},
	{"", 80},
	{"", 81},
	{"", 82},
	{"", 83},
	{"", 84},
	{"", 85},
	{"", 86},
	{"", 87},
	{"", 88},
	{"", 89},
	{"", 90},
	{"", 91},
	{"", 92},
	{"", 93},
	{"", 94},
	{"", 95},
	{"", 96},
	{"", 97},
	{"", 98},
	{"", 99},
	{"", 100},
	{"", 101},
	{"", 102},
	{"", 103},
	{"", 104},
	{"", 105},
	{"", 106},
	{"", 107},
	{"", 108},
	{"", 109},
	{"", 110},
	{"", 111},
	{"", 112},
	{"", 113},
	{"", 114},
	{"", 115},
	{"", 116},
	{"", 117},
	{"", 118},
	{"", 119},
	{"", 120},
	{"", 121},
	{"", 122},
	{"", 123},
	{"", 124},
	{"", 125},
	{"", 126},
	{"", 127},
	{"", 128},
	{"", 129},
	{"", 130},
	{"", 131},
	{"", 132},
	{"", 133},
	{"", 134},
	{"", 135},
	{"", 136},
	{"", 137},
	{"", 138},
	{"", 139},
	{"", 140},
	{"", 141},
	{"", 142},
	{"", 143},
	{"", 144},
	{"", 145},
	{"", 146},
	{"", 147},
	{"", 148},
	{"", 149},
	{"", 150},
	{"", 151},
	{"", 152},
	{"", 153},
	{"", 154},
	{"", 155},
	{"", 156},
	{"", 157},
	{"", 158},
	{"", 159},
	{"", 160},
	{"", 161},
	{"", 162},
	{"", 163},
	{"", 164},
	{"", 165},
	{"", 166},
	{"", 167},
	{"", 168},
	{"", 169},
	{"", 170},
	{"", 171},
	{"", 172},
	{"", 173},
	{"", 174},
	{"", 175},
	{"", 176},
	{"", 177},
	{"", 178},
	{"", 179},
	{"", 180},
	{"", 181},
	{"", 182},
	{"", 183},
	{"", 184},
	{"", 185},
	{"", 186},
	{"", 187},
	{"", 188},
	{"", 189},
	{"", 190},
	{"", 191},
	{"", 192},
	{"", 193},
	{"", 194},
	{"", 195},
	{"", 196},
	{"", 197},
	{"", 198},
	{"", 199},
	{"", 200},
	{"", 201},
	{"", 202},
	{"", 203},
	{"", 204},
	{"", 205},
	{"", 206},
	{"", 207},
	{"", 208},
	{"", 209},
	{"", 210},
	{"", 211},
	{"", 212},
	{"", 213},
	{"", 214},
	{"", 215},
	{"", 216},
	{"", 217},
	{"", 218},
	{"", 219},
	{"", 220},
	{"", 221},
	{"", 222},
	{"", 223},
	{"", 224},
	{"", 225},
	{"", 226},
	{"", 227},
	{"", 228},
	{"", 229},
	{"", 230},
	{"", 231},
	{"", 232},
	{"", 233},
	{"", 234},
	{"", 235},
	{"", 236},
	{"", 237},
	{"", 238},
	{"", 239},
	{"", 240},
	{"", 241},
	{"", 242},
	{"", 243},
	{"", 244},
	{"", 245},
	{"", 246},
	{"", 247},
	{"", 248},
	{"", 249},
	{"", 250},
	{"", 251},
	{"", 252},
	{"", 253},
	{"", 254},
	{"", 255}
};

//std::map<std::string, char> byte_to_ascii = {
//	{}

int main(int argc, char* argv[])
{
	if(argc == 1)
	{
		std::cout << "Usage: " << argv[0] << " <hex string>" << std::endl;
		return 1;
	}
	std::string answer;
	int i = 0;
	while(argv[1][i] != 0)
	{
		//std::cout << "appending " << int_to_bstr[b64_bin[argv[1][i]]] << std::endl; 
		answer.append(int_to_bstr[b64_bin[argv[1][i++]]]);
	}
/*	if(answer.length()*6 % 8 == 2)
		answer.append("000000");
	else if(answer.length()*6 % 8 == 4)
		answer.append("000000000000");
*/
	i = 0;
	auto it = answer.begin();
	while(it != answer.end())
	{
		if(i % 8 == 0 && i!=0) 
			std::cout << std::endl;
		std::cout << *it;
		i++;
		it++;
	}
	return 0;
}
